// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/enterprise/proto/license.proto

/*
Package enterprise is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/enterprise/proto/license.proto

It has these top-level messages:
	License
	Service
	Subscription
	Token
	Update
*/
package enterprise

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// License is the enterprise license
type License struct {
	// unique id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// version of license
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// time of creation
	Created uint64 `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	// X-Micro-License hash
	Hash string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	// subscription
	Subscription *Subscription `protobuf:"bytes,5,opt,name=subscription" json:"subscription,omitempty"`
}

func (m *License) Reset()                    { *m = License{} }
func (m *License) String() string            { return proto.CompactTextString(m) }
func (*License) ProtoMessage()               {}
func (*License) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *License) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *License) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *License) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *License) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *License) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

// Service is a micro service
type Service struct {
	// name of service
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// version of service
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// unique id of instance
	Id string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Subscription is a user subscription
type Subscription struct {
	// id of subscription
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// email of associated
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	// status e.g active
	Status string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	// created at
	Created uint64 `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	// quantity e.g services
	Quantity uint64 `protobuf:"varint,5,opt,name=quantity" json:"quantity,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Subscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Subscription) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Subscription) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Subscription) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Subscription) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// Token is for auth
type Token struct {
	// unique id of token
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// unix timestamp
	Expires uint64 `protobuf:"varint,2,opt,name=expires" json:"expires,omitempty"`
	// various values
	Claims map[string]string `protobuf:"bytes,3,rep,name=claims" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// encrypted hash
	Hash string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Token) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Token) GetExpires() uint64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *Token) GetClaims() map[string]string {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *Token) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Update is a checkpoint
type Update struct {
	// service using license
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	// license associated
	License *License `protobuf:"bytes,2,opt,name=license" json:"license,omitempty"`
	// unix timestamp
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Update) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Update) GetLicense() *License {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *Update) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*License)(nil), "enterprise.License")
	proto.RegisterType((*Service)(nil), "enterprise.Service")
	proto.RegisterType((*Subscription)(nil), "enterprise.Subscription")
	proto.RegisterType((*Token)(nil), "enterprise.Token")
	proto.RegisterType((*Update)(nil), "enterprise.Update")
}

func init() { proto.RegisterFile("github.com/micro/enterprise/proto/license.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x8b, 0xdb, 0x30,
	0x10, 0x45, 0xb6, 0x63, 0x37, 0xe3, 0x50, 0x8a, 0x5a, 0x8a, 0x09, 0x2d, 0x04, 0x9f, 0x7c, 0xa9,
	0x0d, 0x29, 0x85, 0xb6, 0xf4, 0x56, 0x4a, 0x2f, 0x3d, 0x29, 0xed, 0x0f, 0x50, 0xec, 0xa1, 0x11,
	0xf1, 0xd7, 0x4a, 0x72, 0xd8, 0x5c, 0x97, 0xfd, 0x1f, 0xfb, 0x33, 0xf6, 0xef, 0x2d, 0x96, 0xe5,
	0x8d, 0xb3, 0x1b, 0xf6, 0xa6, 0xa7, 0xf7, 0xf4, 0x34, 0xf3, 0x66, 0x20, 0xfb, 0x2f, 0xf4, 0xae,
	0xdb, 0xa6, 0x79, 0x53, 0x65, 0x95, 0xc8, 0x65, 0x93, 0x61, 0xad, 0x51, 0xb6, 0x52, 0x28, 0xcc,
	0x5a, 0xd9, 0xe8, 0x26, 0x2b, 0x45, 0x8e, 0xb5, 0xc2, 0xd4, 0x20, 0x0a, 0x27, 0x3e, 0xbe, 0x23,
	0x10, 0xfc, 0x19, 0x58, 0xfa, 0x1a, 0x1c, 0x51, 0x44, 0x64, 0x45, 0x92, 0x39, 0x73, 0x44, 0x41,
	0x23, 0x08, 0x0e, 0x28, 0x95, 0x68, 0xea, 0xc8, 0x31, 0x97, 0x23, 0xec, 0x99, 0x5c, 0x22, 0xd7,
	0x58, 0x44, 0xee, 0x8a, 0x24, 0x1e, 0x1b, 0x21, 0xa5, 0xe0, 0xed, 0xb8, 0xda, 0x45, 0x9e, 0x79,
	0x60, 0xce, 0xf4, 0x07, 0x2c, 0x54, 0xb7, 0x55, 0xb9, 0x14, 0xad, 0xee, 0xcd, 0x66, 0x2b, 0x92,
	0x84, 0xeb, 0x28, 0x3d, 0x95, 0x91, 0x6e, 0x26, 0x3c, 0x3b, 0x53, 0xc7, 0xbf, 0x21, 0xd8, 0xa0,
	0x3c, 0x88, 0x1c, 0x7b, 0xf3, 0x9a, 0x57, 0x68, 0x4b, 0x34, 0xe7, 0x17, 0x8a, 0x1c, 0xda, 0x71,
	0xc7, 0x76, 0xe2, 0x1b, 0x02, 0x8b, 0xe9, 0x3f, 0xcf, 0xfa, 0x7d, 0x07, 0x33, 0xac, 0xb8, 0x28,
	0xad, 0xd1, 0x00, 0xe8, 0x7b, 0xf0, 0x95, 0xe6, 0xba, 0x53, 0xd6, 0xca, 0xa2, 0x69, 0x06, 0xde,
	0x79, 0x06, 0x4b, 0x78, 0x75, 0xd5, 0xf1, 0x5a, 0x0b, 0x7d, 0x34, 0xbd, 0x7a, 0xec, 0x11, 0xc7,
	0xf7, 0x04, 0x66, 0x7f, 0x9b, 0x3d, 0xd6, 0x97, 0xd2, 0xc6, 0xeb, 0x56, 0x48, 0x54, 0xe6, 0x7f,
	0x8f, 0x8d, 0x90, 0x7e, 0x01, 0x3f, 0x2f, 0xb9, 0xa8, 0xfa, 0x0a, 0xdc, 0x24, 0x5c, 0x7f, 0x9c,
	0x26, 0x67, 0xcc, 0xd2, 0x9f, 0x86, 0xff, 0x55, 0x6b, 0x79, 0x64, 0x56, 0x7c, 0x69, 0x14, 0xcb,
	0x6f, 0x10, 0x4e, 0xa4, 0xf4, 0x0d, 0xb8, 0x7b, 0x3c, 0xda, 0x22, 0xfa, 0x63, 0x9f, 0xc1, 0x81,
	0x97, 0x1d, 0x8e, 0x19, 0x18, 0xf0, 0xdd, 0xf9, 0x4a, 0xe2, 0x5b, 0x02, 0xfe, 0xbf, 0xb6, 0xe0,
	0x1a, 0xe9, 0x27, 0x08, 0xd4, 0x30, 0x12, 0xf3, 0x34, 0x5c, 0xbf, 0x3d, 0x9b, 0xe5, 0x40, 0xb1,
	0x51, 0xd3, 0xcb, 0xed, 0x02, 0x1a, 0xd7, 0x27, 0x72, 0xbb, 0x7d, 0x6c, 0xd4, 0xd0, 0x0f, 0x30,
	0xd7, 0xa2, 0x42, 0xa5, 0x79, 0xd5, 0xda, 0xf5, 0x3a, 0x5d, 0x6c, 0x7d, 0xb3, 0xc3, 0x9f, 0x1f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x63, 0x48, 0x82, 0xf6, 0x02, 0x00, 0x00,
}
